--- a/qmerge.c	2018-03-25 00:24:49.000000000 +0000
+++ b/qmerge.c	2018-03-25 00:24:53.000000000 +0000
@@ -30,8 +30,6 @@
 /* #define BUSYBOX "/bin/busybox" */
 #define BUSYBOX ""
 
-int old_repo = 0;
-
 #define QMERGE_FLAGS "fFsKUpuyO" COMMON_FLAGS
 static struct option const qmerge_long_opts[] = {
 	{"fetch",   no_argument, NULL, 'f'},
@@ -75,7 +73,8 @@
 /*
 	"CHOST", "DEPEND", "DESCRIPTION", "EAPI",
 	"IUSE", "KEYWORDS", "LICENSE", "PDEPEND",
-	"PROVIDE", "RDEPEND", "SLOT", "USE"
+	"PROVIDE", "RDEPEND", "SLOT", "USE",
+	"REPO", "PATH"
 */
 struct pkg_t {
 	char PF[64];
@@ -89,6 +88,7 @@
 	size_t SIZE;
 	char USE[BUFSIZ];
 	char REPO[64];
+	char PATH[_Q_PATH_MAX];
 };
 
 struct llist_char_t {
@@ -762,7 +762,7 @@
 	static char *phases;
 	static size_t phases_len;
 	char buf[1024];
-	char *tbz2, *p, *D, *T;
+	char *tbz2, *p, *D, *T, *tarbz2, *xpak;
 	int i;
 	char **ARGV;
 	int ARGC;
@@ -901,20 +901,28 @@
 	 *      tarball directly rather than unpacking it first. */
 
 	/* split the tbz and xpak data */
-	xasprintf(&tbz2, "%s/%s/%s.tbz2", pkgdir, pkg->CATEGORY, pkg->PF);
-	if (run_applet_l("qtbz2", "-s", tbz2, NULL) != 0)
-		err("`qtbz2 -s %s` failed", tbz2);
+	xasprintf(&tbz2, "%s/%s", pkgdir, pkg->PATH);
+	xasprintf(&tarbz2, "%s.tar.bz2", pkg->PF);
+	xasprintf(&xpak, "%s.xpak", pkg->PF);
+
+	warn("tbz2x1: %s", tbz2);
+	warn("tarbz2: %s", tarbz2);
+	warn("xpak: %s", xpak);
+	if (run_applet_l("qtbz2", "-s", tbz2, tarbz2, xpak, NULL) != 0)
+		err("`qtbz2 -s %s %s %s` failed", tbz2, tarbz2, xpak);
 
 	mkdir("vdb", 0755);
-	sprintf(tbz2, "%s.xpak", pkg->PF);
-	if (run_applet_l("qxpak", "-d", "vdb", "-x", tbz2, NULL) != 0)
-		err("`qxpak -d vdb -x %s` failed", tbz2);
+	if (run_applet_l("qxpak", "-d", "vdb", "-x", xpak, NULL) != 0)
+		err("`qxpak -d vdb -x %s` failed", xpak);
 
 	free(tbz2);
+	free(tarbz2);
+	free(xpak);
 
 	/* extrct the binary package data */
 	mkdir("image", 0755);
 	snprintf(buf, sizeof(buf), BUSYBOX " tar -jx%sf %s.tar.bz2 -C image/", ((verbose > 1) ? "v" : ""), pkg->PF);
+	warn("buf3: %s", buf);
 	xsystem(buf);
 	fflush(stdout);
 
@@ -1272,7 +1280,8 @@
 static void
 pkg_fetch(int level, const depend_atom *atom, const struct pkg_t *pkg)
 {
-	char buf[_Q_PATH_MAX], str[_Q_PATH_MAX];
+	char pkgdirpath[_Q_PATH_MAX], path[_Q_PATH_MAX];
+	char *dirc, *dname;
 
 	/* qmerge -pv patch */
 	if (pretend) {
@@ -1283,57 +1292,51 @@
 	}
 
 	/* check to see if file exists and it's checksum matches */
-	snprintf(buf, sizeof(buf), "%s/%s/%s.tbz2", pkgdir, pkg->CATEGORY, pkg->PF);
-	unlink_empty(buf);
+	snprintf(path, sizeof(path), "%s/%s", pkgdir, pkg->PATH);
+	unlink_empty(path);
 
-	snprintf(str, sizeof(str), "%s/%s", pkgdir, pkg->CATEGORY);
-	mkdir(str, 0755);
+	dirc = strdup(pkg->PATH);
+	dname = dirname(dirc);
+	snprintf(pkgdirpath, sizeof(pkgdirpath), "%s/%s", pkgdir, dname);
+	mkdir(pkgdirpath, 0755);
 
 	/* XXX: should do a size check here for partial downloads */
 
-	if (force_download && (access(buf, R_OK) == 0) && (pkg->SHA1[0] || pkg->MD5[0])) {
-		if (pkg_verify_checksums(buf, pkg, atom, 0, 0) != 0)
-			unlink(buf);
+	if (force_download && (access(path, R_OK) == 0) && (pkg->SHA1[0] || pkg->MD5[0])) {
+		if (pkg_verify_checksums(path, pkg, atom, 0, 0) != 0)
+			unlink(path);
 	}
-	if (access(buf, R_OK) == 0) {
+
+	if (access(path, R_OK) == 0) {
 		if (!pkg->SHA1[0] && !pkg->MD5[0]) {
-			warn("No checksum data for %s (try `emaint binhost --fix`)", buf);
+			warn("No checksum data for %s (try `emaint binhost --fix`)", path);
 			return;
 		} else {
-			if (pkg_verify_checksums(buf, pkg, atom, qmerge_strict, !quiet) == 0) {
+			if (pkg_verify_checksums(path, pkg, atom, qmerge_strict, !quiet) == 0) {
 				pkg_merge(0, atom, pkg);
 				return;
 			}
 		}
 	}
+
 	if (verbose)
-		printf("Fetching %s/%s.tbz2\n", atom->CATEGORY, pkg->PF);
+		printf("Fetching %s\n", pkg->PATH);
 
 	/* fetch the package */
-	/* Check CATEGORY first */
-	if (!old_repo) {
-		snprintf(buf, sizeof(buf), "%s/%s.tbz2", atom->CATEGORY, pkg->PF);
-		fetch(str, buf);
-	}
-	snprintf(buf, sizeof(buf), "%s/%s/%s.tbz2", pkgdir, atom->CATEGORY, pkg->PF);
-	if (access(buf, R_OK) != 0) {
-		snprintf(buf, sizeof(buf), "%s.tbz2", pkg->PF);
-		fetch(str, buf);
-		old_repo = 1;
+	if (access(path, R_OK) != 0) {
+		fetch(pkgdirpath, pkg->PATH);
 	}
 
 	/* verify the pkg exists now. unlink if zero bytes */
-	snprintf(buf, sizeof(buf), "%s/%s/%s.tbz2", pkgdir, atom->CATEGORY, pkg->PF);
-	unlink_empty(buf);
+	unlink_empty(path);
 
-	if (access(buf, R_OK) != 0) {
-		warn("Failed to fetch %s.tbz2 from %s", pkg->PF, binhost);
+	if (access(path, R_OK) != 0) {
+		warn("Failed to fetch %s from %s", pkg->PATH, binhost);
 		fflush(stderr);
 		return;
 	}
 
-	snprintf(buf, sizeof(buf), "%s/%s/%s.tbz2", pkgdir, atom->CATEGORY, pkg->PF);
-	if (pkg_verify_checksums(buf, pkg, atom, qmerge_strict, !quiet) == 0) {
+	if (pkg_verify_checksums(path, pkg, atom, qmerge_strict, !quiet) == 0) {
 		pkg_merge(0, atom, pkg);
 		return;
 	}
@@ -1372,6 +1375,8 @@
 	if (pkg->REPO[0])
 		if (strcmp(pkg->REPO, "gentoo") != 0)
 			printf(" %sRepo%s:%s %s\n", DKGREEN, YELLOW, NORM, pkg->REPO);
+	if (pkg->PATH[0])
+		printf(" %sPath%s:%s %s\n", DKGREEN, YELLOW, NORM, pkg->PATH);
 
 	if ((p = best_version(pkg->CATEGORY, atom->PN)) != NULL) {
 		if (*p) {
@@ -1525,6 +1530,7 @@
 		p += 2;
 
 		if (*buf) {
+			warn("buf: %s", buf);
 			/* we dont need all the info */
 			if (strcmp(buf, "RDEPEND") == 0)
 				strncpy(pkg->RDEPEND, p, sizeof(Pkg.RDEPEND));
@@ -1555,6 +1561,9 @@
 				strncpy(pkg->MD5, p, sizeof(Pkg.MD5));
 			if (strcmp(buf, "SHA1") == 0)
 				strncpy(pkg->SHA1, p, sizeof(Pkg.SHA1));
+
+			if (strcmp(buf, "PATH") == 0)
+				strncpy(pkg->PATH, p, sizeof(Pkg.PATH));
 		}
 	}
 	fclose(fp);
@@ -1731,6 +1740,7 @@
 				break;
 			case 'P':
 				if (strcmp(buf, "PF") == 0) strncpy(Pkg.PF, p, sizeof(Pkg.PF));
+				if (strcmp(buf, "PATH") == 0) strncpy(Pkg.PATH, p, sizeof(Pkg.PATH));
 				break;
 			case 'S':
 				if (strcmp(buf, "SIZE") == 0) Pkg.SIZE = atol(p);
